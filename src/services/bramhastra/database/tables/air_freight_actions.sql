CREATE TABLE brahmastra.kafka_air_freight_action
    `data` String
)
ENGINE = Kafka('127.0.0.1:29092', 'arc.public.air_freight_actions', '001','JSONAsString');

CREATE MATERIALIZED VIEW brahmastra.air_freight_before_action TO brahmastra.air_freight_action
(
    `id` UInt256,
    `origin_airport_id` UUID,
    `destination_airport_id` UUID,
    `origin_country_id` UUID,
    `destination_country_id` UUID,
    `origin_continent_id` UUID,
    `destination_continent_id` UUID,
    `origin_region_id` UUID,
    `destination_region_id` UUID,
    `origin_trade_id` UUID,
    `destination_trade_id` UUID,
    `commodity` FixedString(256),
    `commodity_type` FixedString(256),
    `commodity_subtype` FixedString(256),
    `container_size` FixedString(256),
    `container_type` FixedString(256),
    `service_provider_id` UUID,
    `rate_id` UUID,
    `validity_id` UUID,
    `price` Float64 DEFAULT 0,
    `standard_price` Float64 DEFAULT 0,
    `price Float64` DEFAULT 0,
    `market_price` Float64 DEFAULT 0,
    `currency` FixedString(3),
    `validity_start` DateTime,
    `validity_end` DateTime,
    `airline_id` UUID,
    `selected_standard_price` Float64 DEFAULT 0,
    `standard_price_accuracy` Float64 DEFAULT 0,
    `standard_price_diff_from_selected_rate` Float64 DEFAULT 0,
    `shipment_state` String,
    `shipment_cancellation_reason` String,
    `revenue_desk_state` String,
    `given_priority` UInt8,
    `rate_created_at` DateTime,
    `rate_updated_at` DateTime,
    `validity_created_at` DateTime,
    `validity_updated_at` DateTime,
    `created_at` DateTime DEFAULT now(),
    `updated_at` DateTime DEFAULT now(),
    `operation_created_at` DateTime,
    `operation_updated_at` DateTime
) AS
SELECT
JSONExtractInt(data, 'before', 'id') AS id,
JSONExtractString(data, 'before', 'origin_airport_id') AS origin_port_id,
JSONExtractString(data, 'before', 'destination_airport_id') AS destination_port_id,
JSONExtractString(data, 'before', 'origin_country_id') AS origin_country_id,
JSONExtractString(data, 'before', 'destination_country_id') AS destination_country_id,
JSONExtractString(data, 'before', 'origin_continent_id') AS origin_continent_id,
JSONExtractString(data, 'before', 'destination_continent_id') AS destination_continent_id,
toUUIDOrZero(JSONExtractString(data, 'before', 'origin_region_id')) AS origin_region_id,
toUUIDOrZero(JSONExtractString(data, 'before', 'destination_region_id')) AS destination_region_id,
toUUIDOrZero(JSONExtractString(data, 'before', 'origin_trade_id')) AS origin_trade_id,
toUUIDOrZero(JSONExtractString(data, 'before', 'destination_trade_id')) AS destination_trade_id,
JSONExtractString(data, 'before', 'commodity') AS commodity,
JSONExtractString(data, 'before', 'commodity_type') AS commodity_type,
JSONExtractString(data, 'before', 'commodity_subtype') AS commodity_subtype,
JSONExtractString(data, 'before', 'container_size') AS container_size,
JSONExtractString(data, 'before', 'container_type') AS container_type,
toUUIDOrZero(JSONExtractString(data, 'before', 'service_provider_id')) AS service_provider_id,
toUUIDOrZero(JSONExtractString(data, 'before', 'rate_id')) AS rate_id,
toUUIDOrZero(JSONExtractString(data, 'before', 'validity_id')) AS validity_id,
JSONExtractFloat(data, 'before', 'price') AS price,
JSONExtractFloat(data, 'before', 'standard_price') AS standard_price,
JSONExtractFloat(data, 'before', 'market_price') AS market_price,
JSONExtractString(data, 'before', 'currency') AS currency,
toDate(JSONExtractInt(data, 'before', 'validity_start')) AS validity_start,
toDate(JSONExtractInt(data, 'before', 'validity_end')) AS validity_end,
toUUIDOrZero(JSONExtractString(data, 'before', 'airline_id')) AS airline_id,
JSONExtractString(data, 'before', 'checkout_source') AS checkout_source,
JSONExtractFloat(data, 'before', 'selected_standard_price') AS selected_standard_price,
JSONExtractFloat(data, 'before', 'standard_price_accuracy') AS standard_price_accuracy,
JSONExtractFloat(data, 'before', 'standard_price_diff_from_selected_rate') AS standard_price_diff_from_selected_rate,
JSONExtractString(data, 'before', 'revenue_desk_state') AS revenue_desk_state,
JSONExtractString(data, 'before', 'shipment_state') AS shipment_state,
JSONExtractString(data, 'before', 'shipment_cancellation_reason') AS shipment_cancellation_reason,
JSONExtractInt(data, 'before', 'given_priority') AS given_priority,
parseDateTimeBestEffortOrZero(JSONExtractString(data, 'before', 'rate_created_at')) AS rate_created_at,
parseDateTimeBestEffortOrZero(JSONExtractString(data, 'before', 'rate_updated_at')) AS rate_updated_at,
parseDateTimeBestEffortOrZero(JSONExtractString(data, 'before', 'validity_created_at')) AS validity_created_at,
parseDateTimeBestEffortOrZero(JSONExtractString(data, 'before', 'validity_updated_at')) AS validity_updated_at,
parseDateTimeBestEffort(JSONExtractString(data, 'before', 'created_at')) AS created_at,
parseDateTimeBestEffort(JSONExtractString(data, 'before', 'updated_at')) AS updated_at,
parseDateTimeBestEffort(JSONExtractString(data, 'before', 'operation_created_at')) AS operation_created_at,
parseDateTimeBestEffort(JSONExtractString(data, 'before', 'operation_updated_at')) AS operation_updated_at
FROM brahmastra.kafka_air_freight_action
WHERE JSONExtractString(data, 'before') IS NOT NULL AND JSONExtract(data,'op','String') = 'u';

CREATE MATERIALIZED VIEW brahmastra.air_freight_after_action TO brahmastra.air_freight_action
(
    `id` UInt256,
    `origin_airport_id` UUID,
    `destination_airport_id` UUID,
    `origin_country_id` UUID,
    `destination_country_id` UUID,
    `origin_continent_id` UUID,
    `destination_continent_id` UUID,
    `origin_region_id` UUID,
    `destination_region_id` UUID,
    `origin_trade_id` UUID,
    `destination_trade_id` UUID,
    `commodity` FixedString(256),
    `commodity_type` FixedString(256),
    `commodity_subtype` FixedString(256),
    `container_size` FixedString(256),
    `container_type` FixedString(256),
    `service_provider_id` UUID,
    `rate_id` UUID,
    `validity_id` UUID,
    `price` Float64 DEFAULT 0,
    `standard_price` Float64 DEFAULT 0,
    `standard_price` Float64 DEFAULT 0,
    `price Float64` DEFAULT 0,
    `market_price` Float64 DEFAULT 0,
    `currency` FixedString(3),
    `validity_start` DateTime,
    `validity_end` DateTime,
    `airline_id` UUID,
    `selected_standard_price` Float64 DEFAULT 0,
    `standard_price_accuracy` Float64 DEFAULT 0,
    `standard_price_diff_from_selected_rate` Float64 DEFAULT 0,
    `revenue_desk_state` String,
    `shipment_state` String,
    `shipment_cancellation_reason` String,
    `given_priority` UInt8,
    `rate_created_at` DateTime,
    `rate_updated_at` DateTime,
    `validity_created_at` DateTime,
    `validity_updated_at` DateTime,
    `created_at` DateTime DEFAULT now(),
    `updated_at` DateTime DEFAULT now(),
    `operation_created_at` DateTime,
    `operation_updated_at` DateTime,
    `sign` Int8 DEFAULT 1,
    `version` UInt64 DEFAULT 1
) AS
    SELECT
    JSONExtractInt(data, 'before', 'id') AS id,
    JSONExtractString(data, 'before', 'origin_airport_id') AS origin_port_id,
    JSONExtractString(data, 'before', 'destination_airport_id') AS destination_port_id,
    JSONExtractString(data, 'before', 'origin_country_id') AS origin_country_id,
    JSONExtractString(data, 'before', 'destination_country_id') AS destination_country_id,
    JSONExtractString(data, 'before', 'origin_continent_id') AS origin_continent_id,
    JSONExtractString(data, 'before', 'destination_continent_id') AS destination_continent_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'origin_region_id')) AS origin_region_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'destination_region_id')) AS destination_region_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'origin_trade_id')) AS origin_trade_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'destination_trade_id')) AS destination_trade_id,
    JSONExtractString(data, 'before', 'commodity') AS commodity,
    JSONExtractString(data, 'before', 'commodity_type') AS commodity_type,
    JSONExtractString(data, 'before', 'commodity_subtype') AS commodity_subtype,
    JSONExtractString(data, 'before', 'container_size') AS container_size,
    JSONExtractString(data, 'before', 'container_type') AS container_type,
    toUUIDOrZero(JSONExtractString(data, 'before', 'service_provider_id')) AS service_provider_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'rate_id')) AS rate_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'validity_id')) AS validity_id,
    JSONExtractFloat(data, 'before', 'price') AS price,
    JSONExtractFloat(data, 'before', 'standard_price') AS standard_price,
    JSONExtractFloat(data, 'before', 'market_price') AS market_price,
    JSONExtractString(data, 'before', 'currency') AS currency,
    toDate(JSONExtractInt(data, 'before', 'validity_start')) AS validity_start,
    toDate(JSONExtractInt(data, 'before', 'validity_end')) AS validity_end,
    toUUIDOrZero(JSONExtractString(data, 'before', 'airline_id')) AS airline_id,
    JSONExtractFloat(data, 'before', 'selected_standard_price') AS selected_standard_price,
    JSONExtractFloat(data, 'before', 'standard_price_accuracy') AS standard_price_accuracy,
    JSONExtractFloat(data, 'before', 'standard_price_diff_from_selected_rate') AS standard_price_diff_from_selected_rate,
    JSONExtractString(data, 'before', 'revenue_desk_state') AS revenue_desk_state,
    JSONExtractString(data, 'before', 'shipment_state') AS shipment_state,
    JSONExtractString(data, 'before', 'shipment_cancellation_reason') AS shipment_cancellation_reason,
    JSONExtractInt(data, 'before', 'given_priority') AS given_priority,
    parseDateTimeBestEffortOrZero(JSONExtractString(data, 'before', 'rate_created_at')) AS rate_created_at,
    parseDateTimeBestEffortOrZero(JSONExtractString(data, 'before', 'rate_updated_at')) AS rate_updated_at,
    parseDateTimeBestEffortOrZero(JSONExtractString(data, 'before', 'validity_created_at')) AS validity_created_at,
    parseDateTimeBestEffortOrZero(JSONExtractString(data, 'before', 'validity_updated_at')) AS validity_updated_at,
    parseDateTimeBestEffort(JSONExtractString(data, 'before', 'created_at')) AS created_at,
    parseDateTimeBestEffort(JSONExtractString(data, 'before', 'updated_at')) AS updated_at,
    parseDateTimeBestEffort(JSONExtractString(data, 'before', 'operation_created_at')) AS operation_created_at,
    parseDateTimeBestEffort(JSONExtractString(data, 'before', 'operation_updated_at')) AS operation_updated_at
    toUnixTimestamp64Milli(parseDateTime64BestEffort(visitParamExtractString(visitParamExtractRaw(data, 'after'), 'operation_updated_at'), 6)) AS version,
    1 AS sign
FROM brahmastra.kafka_air_freight_action
WHERE JSONExtractString(data, 'after') IS NOT NULL AND JSONExtract(data,'op','String') in ('c','u');

CREATE TABLE brahmastra.air_freight_action
(
        id UInt256,
        origin_airport_id UUID,
        destination_airport_id UUID,
        origin_country_id UUID,
        destination_country_id UUID,
        origin_continent_id UUID,
        destination_continent_id UUID,
        origin_region_id UUID,
        destination_region_id UUID,
        origin_trade_id UUID,
        destination_trade_id UUID,
        commodity FixedString(256),
        commodity_type Fixedstring(256),
        commodity_subtype FixedString(256),
        container_size FixedString(256),
        container_type FixedString(256),
        service_provider_id UUID,
        rate_id UUID,
        validity_id UUID,
        price Float64 DEFAULT 0,
        standard_price Float64 DEFAULT 0,
        market_price Float64 DEFAULT 0,
        currency FixedString(3),
        validity_start DateTime,
        validity_end DateTime,
        airline_id UUID,
        selected_standard_price Float64 DEFAULT 0,
        standard_price_accuracy Float64 DEFAULT 0,
        standard_price_diff_from_selected_rate Float64 DEFAULT 0,
        revenue_desk_state Enum('empty'= 0,'visited'= 1,'selected_for_preference'= 2,'selected_for_booking'= 3),
        shipment_state Enum('empty'= 0,'shipment_received'= 1,'confirmed_by_importer_exporter'= 2,'in_progress'=3, 'cancelled'= 4,'aborted'= 5,'completed'= 6),
        shipment_cancellation_reason String,
        given_priority UInt8,
        rate_created_at DateTime,
        rate_updated_at DateTime,
        validity_created_at DateTime,
        validity_updated_at DateTime,
        created_at DateTime DEFAULT now(),
        updated_at DateTime DEFAULT now(),
        operation_created_at DateTime,
        operation_updated_at DateTime,
        sign Int8 DEFAULT 1,
        version UInt64 DEFAULT 1
)
ENGINE = MergeTree()
ORDER BY (container_size, origin_continent_id, origin_country_id, origin_airport_id, rate_id, validity_id);