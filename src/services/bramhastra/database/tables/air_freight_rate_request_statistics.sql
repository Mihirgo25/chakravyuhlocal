
CREATE TABLE brahmastra.kafka_air_freight_rate_request_statistics
(
    `data` String
)
ENGINE = Kafka('127.0.0.1:29092', 'arc.public.air_freight_rate_request_statistics', '001','JSONAsString');

CREATE MATERIALIZED VIEW brahmastra.air_freight_before_rate_request_statistics TO brahmastra.air_freight_rate_request_statistics
(
    `id` UInt256,
    `origin_airport_id` UUID,
    `destination_airport_id` UUID,
    `origin_region_id` UUID,
    `destination_region_id` UUID,
    `origin_country_id` UUID,
    `destination_country_id` UUID,
    `origin_continent_id` UUID,
    `destination_continent_id` UUID,
    `origin_trade_id` UUID,
    `destination_trade_id` UUID,
    `origin_pricing_zone_map_id` UUID,
    `destination_pricing_zone_map_id` UUID,
    `rate_request_id` UUID,
    `validity_ids` Array(String),
    `source` FixedString(256),
    `source_id` UUID,
    `performed_by_id` UUID,
    `performed_by_org_id` UUID,
    `importer_exporter_id` UUID,
    `closing_remarks` Array(String),
    `closed_by_id` UUID,
    `request_type` FixedString(256),
    `commodity` FixedString(256),
    `commodity_type` FixedString(256),
    `commodity_subtype` FixedString(256),
    `is_rate_reverted` Bool DEFAULT true,
    `created_at` DateTime DEFAULT now(),
    `updated_at` DateTime DEFAULT now(),
    `sign` Int8 DEFAULT 1,
    `version` UInt64 DEFAULT 1
) AS
SELECT
    JSONExtractUInt(data, 'before', 'id') AS id,
    JSONExtractString(data, 'before', 'origin_airport_id') AS origin_airport_id,
    JSONExtractString(data, 'before', 'destination_airport_id') AS destination_airport_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'origin_region_id')) AS origin_region_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'destination_region_id')) AS destination_region_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'origin_country_id')) AS origin_country_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'destination_country_id')) AS destination_country_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'origin_continent_id')) AS origin_continent_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'destination_continent_id')) AS destination_continent_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'origin_trade_id')) AS origin_trade_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'destination_trade_id')) AS destination_trade_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'origin_pricing_zone_map_id')) AS origin_pricing_zone_map_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'destination_pricing_zone_map_id')) AS destination_pricing_zone_map_id,
    JSONExtractString(data, 'before', 'rate_request_id') AS rate_request_id,
    JSONExtractArrayRaw(data, 'before', 'validity_ids') AS validity_ids,
    JSONExtractString(data, 'before', 'source') AS source,
    toUUIDOrZero(JSONExtractString(data, 'before', 'source_id')) AS source_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'performed_by_id')) AS performed_by_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'performed_by_org_id')) AS performed_by_org_id,
    toUUIDOrZero(JSONExtractString(data, 'before', 'importer_exporter_id')) AS importer_exporter_id,
    JSONExtractArrayRaw(data, 'before', 'closing_remarks') AS closing_remarks,
    toUUIDOrZero(JSONExtractString(data, 'before', 'closed_by_id')) AS closed_by_id,
    JSONExtractString(data, 'before', 'request_type') AS request_type,
    JSONExtractString(data, 'before', 'commodity') AS commodity,
    JSONExtractString(data, 'before', 'commodity_type') AS commodity_type,
    JSONExtractString(data, 'before', 'commodity_subtype') AS commodity_subtype,
    JSONExtractBool(data, 'before', 'is_rate_reverted') AS is_rate_reverted,
    parseDateTimeBestEffortOrZero(JSONExtractString(data, 'before', 'created_at')) AS created_at,
    parseDateTimeBestEffortOrZero(JSONExtractString(data, 'before', 'updated_at')) AS updated_at,
    -1 AS sign,
    toUnixTimestamp64Milli(parseDateTime64BestEffort(visitParamExtractString(visitParamExtractRaw(data, 'before'), 'operation_updated_at'), 6)) AS version,
    parseDateTimeBestEffortOrZero(JSONExtractString(data, 'before', 'operation_created_at')) AS operation_created_at,
    parseDateTimeBestEffortOrZero(JSONExtractString(data, 'before', 'operation_updated_at')) AS operation_updated_at
    FROM brahmastra.kafka_air_freight_rate_request_statistics
    WHERE JSONExtract(data,'op','String') = 'u';

CREATE MATERIALIZED VIEW brahmastra.air_freight_after_rate_request_statistics TO brahmastra.air_freight_rate_request_statistics
(
    `id` UInt256,
    `origin_airport_id` UUID,
    `destination_airport_id` UUID,
    `origin_region_id` UUID,
    `destination_region_id` UUID,
    `origin_country_id` UUID,
    `destination_country_id` UUID,
    `origin_continent_id` UUID,
    `destination_continent_id` UUID,
    `origin_trade_id` UUID,
    `destination_trade_id` UUID,
    `origin_pricing_zone_map_id` UUID,
    `destination_pricing_zone_map_id` UUID,
    `rate_request_id` UUID,
    `validity_ids` Array(String),
    `source` FixedString(256),
    `source_id` UUID,
    `performed_by_id` UUID,
    `performed_by_org_id` UUID,
    `importer_exporter_id` UUID,
    `closing_remarks` Array(String),
    `closed_by_id` UUID,
    `request_type` FixedString(256),
    `commodity` FixedString(256),
    `commodity_type` FixedString(256),
    `commodity_subtype` FixedString(256),
    `is_rate_reverted` Bool DEFAULT true,
    `created_at` DateTime DEFAULT now(),
    `updated_at` DateTime DEFAULT now(),
    `sign` Int8 DEFAULT 1,
    `version` UInt64 DEFAULT 1,
    `operation_created_at` DateTime,
    `operation_updated_at` DateTime,
) AS
    SELECT
    JSONExtractUInt(data, 'after', 'id') AS id,
    JSONExtractString(data, 'after', 'origin_airport_id') AS origin_airport_id,
    JSONExtractString(data, 'after', 'destination_airport_id') AS destination_airport_id,
    toUUIDOrZero(JSONExtractString(data, 'after', 'origin_region_id')) AS origin_region_id,
    toUUIDOrZero(JSONExtractString(data, 'after', 'destination_region_id')) AS destination_region_id,
    toUUIDOrZero(JSONExtractString(data, 'after', 'origin_country_id')) AS origin_country_id,
    toUUIDOrZero(JSONExtractString(data, 'after', 'destination_country_id')) AS destination_country_id,
    toUUIDOrZero(JSONExtractString(data, 'after', 'origin_continent_id')) AS origin_continent_id,
    toUUIDOrZero(JSONExtractString(data, 'after', 'destination_continent_id')) AS destination_continent_id,
    toUUIDOrZero(JSONExtractString(data, 'after', 'origin_trade_id')) AS origin_trade_id,
    toUUIDOrZero(JSONExtractString(data, 'after', 'destination_trade_id')) AS destination_trade_id,
    toUUIDOrZero(JSONExtractString(data, 'after', 'origin_pricing_zone_map_id')) AS origin_pricing_zone_map_id,
    toUUIDOrZero(JSONExtractString(data, 'after', 'destination_pricing_zone_map_id')) AS destination_pricing_zone_map_id,
    JSONExtractString(data, 'after', 'rate_request_id') AS rate_request_id,
    JSONExtractArrayRaw(data, 'after', 'validity_ids') AS validity_ids,
    JSONExtractString(data, 'after', 'source') AS source,
    toUUIDOrZero(JSONExtractString(data, 'after', 'source_id')) AS source_id,
    toUUIDOrZero(JSONExtractString(data, 'after', 'performed_by_id')) AS performed_by_id,
    toUUIDOrZero(JSONExtractString(data, 'after', 'performed_by_org_id')) AS performed_by_org_id,
    toUUIDOrZero(JSONExtractString(data, 'after', 'importer_exporter_id')) AS importer_exporter_id,
    JSONExtractArrayRaw(data, 'after', 'closing_remarks') AS closing_remarks,
    toUUIDOrZero(JSONExtractString(data, 'after', 'closed_by_id')) AS closed_by_id,
    JSONExtractString(data, 'after', 'request_type') AS request_type,
    JSONExtractString(data, 'after', 'commodity') AS commodity,
    JSONExtractString(data, 'before', 'commodity_type') AS commodity_type,
    JSONExtractString(data, 'before', 'commodity_subtype') AS commodity_subtype,
    JSONExtractBool(data, 'after', 'is_rate_reverted') AS is_rate_reverted,
    parseDateTimeBestEffortOrZero(JSONExtractString(data, 'after', 'created_at')) AS created_at,
    parseDateTimeBestEffortOrZero(JSONExtractString(data, 'after', 'updated_at')) AS updated_at,
    1 AS sign,
    toUnixTimestamp64Milli(parseDateTime64BestEffort(visitParamExtractString(visitParamExtractRaw(data, 'after'), 'operation_updated_at'), 6)) AS version,
    parseDateTimeBestEffortOrZero(JSONExtractString(data, 'after', 'operation_created_at')) AS operation_created_at,
    parseDateTimeBestEffortOrZero(JSONExtractString(data, 'after', 'operation_updated_at')) AS operation_updated_at
FROM brahmastra.kafka_air_freight_rate_request_statistics  
WHERE JSONExtract(data,'op','String') in ('c','u');


CREATE TABLE brahmastra.air_freight_rate_request_statistics
(
        id UInt256,
        origin_airport_id UUID,
        destination_airport_id UUID,
        origin_region_id UUID,
        destination_region_id UUID,
        origin_country_id UUID,
        destination_country_id UUID,
        origin_continent_id UUID,
        destination_continent_id UUID,
        origin_trade_id UUID,
        destination_trade_id UUID,
        origin_pricing_zone_map_id UUID,
        destination_pricing_zone_map_id UUID,
        rate_request_id UUID,
        validity_ids Array(String),
        source FixedString(256),
        source_id UUID,
        performed_by_id UUID,
        performed_by_org_id UUID,
        importer_exporter_id UUID,
        closing_remarks Array(String),
        closed_by_id UUID,
        request_type FixedString(256),
        commodity FixedString(256),
        commodity_type FixedString(256),
        commodity_subtype FixedString(256),
        is_rate_reverted Bool DEFAULT true,
        created_at DateTime DEFAULT now(),
        updated_at DateTime DEFAULT now(),
        sign Int8 DEFAULT 1,
        version UInt64 DEFAULT 1
)
ENGINE = VersionedCollapsingMergeTree(sign, version)
PRIMARY KEY (origin_continent_id,origin_country_id,origin_airport_id,performed_by_id)
ORDER BY (origin_continent_id,origin_country_id,origin_airport_id,performed_by_id,updated_at);