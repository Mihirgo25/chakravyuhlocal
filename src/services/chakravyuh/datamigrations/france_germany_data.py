
from services.haulage_freight_rate.models.haulage_freight_rate_rule_sets import HaulageFreightRateRuleSet

data_dangerous_carrier = [
    [60, 1294, 1849, 1058, 1820],
    [70, 1340, 1914, 1058, 1820],
    [80, 1386, 1979, 1058, 1820],
    [90, 1431, 2045, 1058, 1820],
    [100, 1477, 2110, 1058, 2040],
    [120, 1568, 2241, 1187, 2040],
    [140, 1660, 2371, 1303, 2240],
    [160, 1751, 2502, 1419, 2439],
    [180, 1843, 2632, 1538, 2634],
    [200, 1934, 2763, 1652, 2838],
    [220, 2025, 2893, 1734, 2976],
    [240, 2117, 3024, 1836, 3161],
    [260, 2208, 3155, 1944, 3336],
    [280, 2300, 3285, 2045, 3513],
    [300, 2391, 3416, 2148, 3688],
    [320, 2482, 3546, 2244, 3858],
    [340, 2574, 3677, 2341, 4018],
    [360, 2665, 3807, 2431, 4174],
    [380, 2757, 3938, 2522, 4334],
    [400, 2848, 4069, 2615, 4490],
    [420, 2939, 4199, 2615, 4490],
    [440, 3031, 4330, 2615, 4490],
    [460, 3122, 4460, 2753, 4726],
    [480, 3214, 4591, 2753, 4726],
    [500, 3305, 4721, 2936, 5048],
    [550, 3533, 5048, 3115, 5346],
    [600, 3762, 5374, 3270, 5624],
    [650, 3991, 5701, 3431, 5891],
    [700, 4219, 6027, 3583, 6152],
    [750, 4448, 6354, 3701, 6357],
    [800, 4676, 6680, 3787, 6503],
    [850, 4905, 7006, 3872, 6651],
    [900, 5133, 7333, 3954, 6796],
    [950, 5362, 7659, 4040, 6943],
    [1000, 5590, 7986, 4040, 7080],
    [1100, 6047, 8639, 4255, 7306],
    [1200, 6504, 9291, 4425, 7598],
    [1300, 6961, 9944, 4596, 7893],
    [1400, 7418, 10597, 4764, 8181],
    [1500, 7875, 11250, 4932, 8477]
]

data_dangerous_client = [
    [60, 1035, 1479, 900, 1546],
    [70, 1072, 1531, 900, 1546],
    [80, 1108, 1584, 900, 1546],
    [90, 1145, 1636, 900, 1546],
    [100, 1182, 1688, 900, 1734],
    [120, 1255, 1792, 1009, 1734],
    [140, 1328, 1897, 1107, 1903],
    [160, 1401, 2001, 1206, 2073],
    [180, 1474, 2106, 1307, 2239],
    [200, 1547, 2210, 1406, 2412],
    [220, 1620, 2315, 1473, 2528],
    [240, 1693, 2419, 1561, 2687],
    [260, 1767, 2524, 1651, 2837],
    [280, 1840, 2628, 1738, 2985],
    [300, 1913, 2733, 1826, 3136],
    [320, 1986, 2837, 1907, 3280],
    [340, 2059, 2941, 1989, 3415],
    [360, 2132, 3046, 2066, 3549],
    [380, 2205, 3150, 2143, 3683],
    [400, 2278, 3255, 2224, 3816],
    [420, 2352, 3359, 2224, 3816],
    [440, 2425, 3464, 2224, 3816],
    [460, 2498, 3568, 2340, 4018],
    [480, 2571, 3673, 2340, 4018],
    [500, 2644, 3777, 2495, 4291],
    [550, 2827, 4038, 2646, 4545],
    [600, 3010, 4299, 2780, 4781],
    [650, 3192, 4561, 2916, 5007],
    [700, 3375, 4822, 3047, 5229],
    [750, 3558, 5083, 3145, 5404],
    [800, 3741, 5344, 3219, 5527],
    [850, 3924, 5605, 3291, 5651],
    [900, 4106, 5866, 3361, 5777],
    [950, 4289, 6127, 3434, 5901],
    [1000, 4472, 6389, 3434, 6019],
    [1100, 4838, 6911, 3618, 6211],
    [1200, 5203, 7433, 3761, 6458],
    [1300, 5569, 7955, 3908, 6708],
    [1400, 5934, 8478, 4049, 6954],
    [1500, 6300, 9000, 4192, 7206]
]

data_general_carrier = [
    [60, 731, 1045, 834, 1432],
    [70, 757, 1081, 834, 1432],
    [80, 783, 1118, 834, 1432],
    [90, 809, 1155, 834, 1432],
    [100, 834, 1192, 834, 1606],
    [120, 886, 1266, 934, 1606],
    [140, 938, 1340, 1026, 1764],
    [160, 989, 1413, 1117, 1921],
    [180, 1041, 1487, 1211, 2073],
    [200, 1093, 1561, 1303, 2233],
    [220, 1144, 1635, 1365, 2343],
    [240, 1196, 1708, 1446, 2488],
    [260, 1248, 1782, 1531, 2627],
    [280, 1299, 1856, 1609, 2764],
    [300, 1351, 1930, 1691, 2905],
    [320, 1402, 2004, 1767, 3038],
    [340, 1454, 2077, 1842, 3163],
    [360, 1506, 2151, 1914, 3286],
    [380, 1557, 2225, 1985, 3413],
    [400, 1609, 2299, 2060, 3536],
    [420, 1661, 2372, 2060, 3536],
    [440, 1712, 2446, 2060, 3536],
    [460, 1764, 2520, 2167, 3722],
    [480, 1816, 2594, 2167, 3722],
    [500, 1867, 2667, 2312, 3975],
    [550, 1996, 2852, 2451, 4210],
    [600, 2125, 3036, 2575, 4428],
    [650, 2255, 3221, 2702, 4637],
    [700, 2384, 3405, 2822, 4844],
    [750, 2513, 3590, 2914, 5006],
    [800, 2642, 3774, 2982, 5121],
    [850, 2771, 3958, 3048, 5237],
    [900, 2900, 4143, 3115, 5350],
    [950, 3029, 4327, 3181, 5467],
    [1000, 3158, 4512, 3181, 5577],
    [1100, 3416, 4881, 3351, 5754],
    [1200, 3675, 5249, 3484, 5983],
    [1300, 3933, 5618, 3620, 6215],
    [1400, 4191, 5987, 3751, 6443],
    [1500, 4449, 6356, 3882, 6676]
]
data_general_client = [
    [60, 585, 836, 710, 1218],
    [70, 606, 865, 710, 1218],
    [80, 626, 895, 710, 1218],
    [90, 647, 924, 710, 1218],
    [100, 668, 954, 710, 1365],
    [120, 709, 1013, 795, 1365],
    [140, 750, 1072, 871, 1498],
    [160, 791, 1131, 949, 1633],
    [180, 833, 1190, 1029, 1764],
    [200, 874, 1249, 1108, 1900],
    [220, 915, 1308, 1160, 1992],
    [240, 957, 1367, 1229, 2114],
    [260, 998, 1426, 1301, 2232],
    [280, 1039, 1485, 1369, 2350],
    [300, 1081, 1544, 1437, 2468],
    [320, 1122, 1603, 1501, 2583],
    [340, 1163, 1662, 1565, 2689],
    [360, 1205, 1721, 1628, 2795],
    [380, 1246, 1780, 1688, 2900],
    [400, 1287, 1839, 1750, 3005],
    [420, 1329, 1898, 1750, 3005],
    [440, 1370, 1957, 1750, 3005],
    [460, 1411, 2016, 1842, 3163],
    [480, 1452, 2075, 1842, 3163],
    [500, 1494, 2134, 1965, 3377],
    [550, 1597, 2282, 2084, 3578],
    [600, 1700, 2429, 2188, 3763],
    [650, 1804, 2577, 2277, 3943],
    [700, 1907, 2724, 2400, 4116],
    [750, 2010, 2872, 2478, 4255],
    [800, 2113, 3019, 2534, 4353],
    [850, 2217, 3167, 2590, 4451],
    [900, 2320, 3314, 2646, 4548],
    [950, 2423, 3462, 2703, 4647],
    [1000, 2527, 3609, 2703, 4739],
    [1100, 2733, 3904, 2847, 4889],
    [1200, 2940, 4200, 2961, 5086],
    [1300, 3146, 4495, 3076, 5282],
    [1400, 3353, 4790, 3188, 5477],
    [1500, 3559, 5085, 3301, 5674]
]

data_empty_wagon_client = [
    [60, 585, 836, 93, 132],
    [70, 606, 865, 93, 132],
    [80, 626, 895, 97, 137],
    [90, 647, 924, 132, 185],
    [100, 668, 954, 139, 194],
    [120, 709, 1013, 139, 194],
    [140, 750, 1072, 139, 194],
    [160, 791, 1131, 152, 212],
    [180, 833, 1190, 152, 212],
    [200, 874, 1249, 152, 212],
    [220, 915, 1308, 167, 228],
    [240, 957, 1367, 167, 228],
    [260, 998, 1426, 199, 273],
    [280, 1039, 1485, 199, 273],
    [300, 1081, 1544, 235, 319],
    [320, 1122, 1603, 235, 319],
    [340, 1163, 1662, 235, 319],
    [360, 1205, 1721, 235, 319],
    [380, 1246, 1780, 235, 319],
    [400, 1287, 1839, 268, 365],
    [420, 1329, 1898, 268, 365],
    [440, 1370, 1957, 268, 365],
    [460, 1411, 2016, 268, 365],
    [480, 1452, 2075, 268, 365],
    [500, 1494, 2134, 268, 365],
    [550, 1597, 2282, 329, 442],
    [600, 1700, 2429, 389, 516],
    [650, 1804, 2577, 446, 594],
    [700, 1907, 2724, 476, 632],
    [750, 2010, 2872, 476, 632],
    [800, 2113, 3019, 476, 632],
    [850, 2217, 3167, 502, 662],
    [900, 2320, 3314, 502, 662],
    [950, 2423, 3462, 502, 662],
    [1000, 2527, 3609, 521, 691],
    [1100, 2733, 3904, 558, 737],
    [1200, 2940, 4200, 578, 768],
    [1300, 3146, 4495, 617, 814],
    [1400, 3353, 4790, 638, 844],
    [1500, 3559, 5085, 638, 844]
]


data_dbcargo= [
    [100, 1301, 1596, 57, 1978, 2466, 3025, 3582, 4082, 54],
    [150, 1557, 2058, 74, 2539, 3010, 3690, 4372, 4985, 73],
    [200, 1759, 2500, 86, 3080, 3650, 4476, 5307, 6048, 81],
    [250, 2068, 2933, 99, 3615, 4298, 5268, 6228, 7114, 94],
    [300, 2288, 3236, 119, 4008, 4757, 5826, 6901, 7860, 116],
    [350, 2585, 3666, 126, 4531, 5377, 6593, 7802, 8897, 122],
    [400, 2783, 3945, 136, 4878, 5783, 7083, 8390, 9570, 133],
    [450, 2933, 4151, 146, 5137, 6093, 7462, 8841, 10076, 136],
    [500, 3126, 4431, 162, 5481, 6502, 7966, 9434, 10753, 148],
    [550, 3309, 4697, 168, 5801, 6888, 8435, 9986, 11381, 162],
    [600, 3483, 4937, 175, 6106, 7240, 8868, 10513, 11978, 168],
    [650, 3654, 5175, 183, 6397, 7586, 9295, 11010, 12553, 175],
    [700, 3821, 5407, 189, 6679, 7927, 9705, 11501, 13107, 181],
    [750, 3944, 5584, 199, 6902, 8184, 10034, 11876, 13539, 187],
    [800, 4031, 5712, 209, 7059, 8367, 10269, 12152, 13856, 189],
    [850, 4117, 5841, 210, 7225, 8565, 10499, 12428, 14168, 199],
    [900, 4208, 5965, 212, 7379, 8751, 10727, 12703, 14481, 207],
    [950, 4302, 6096, 220, 7536, 8935, 10959, 12979, 14790, 209],
    [1000, 4392, 6228, 223, 7698, 9129, 11193, 13240, 15106, 212],
    [1100, 4530, 6421, 231, 7939, 9405, 11536, 13660, 15566, 220],
    [1200, 4710, 6671, 238, 8255, 9788, 11997, 14210, 16188, 229],
    [1300, 4894, 6938, 244, 8567, 10160, 12454, 14749, 16813, 233]
]
Wagon_types = ["2 axles","More than 2 axles"]


def insert_france_germany_rates():
    
    for row in data_dangerous_carrier:
        for element in range(1,len(row)-2):
            query1 = {
                "distance" : row[0],
                "base_price" : row[element],
                "wagon_type" : Wagon_types[element-1],
                "train_load_type" : "Wagon Load",
                "commodity_class_type" : "dangerous",
                "currency" : "EUR",
                "country_code" : "FR",
                "haulage_type": "carrier"
                }
            
            query2 = {
                "distance" : row[0],
                "base_price" : row[element+2],
                "wagon_type" : Wagon_types[element-1],
                "train_load_type" : "Wagon Load",
                "commodity_class_type" : "dangerous",
                "currency" : "EUR",
                "country_code" : "DE",
                "haulage_type": "carrier"
                }
            
            HaulageFreightRateRuleSet.create(**query1)
            HaulageFreightRateRuleSet.create(**query2)


    for row in data_dangerous_client:
        for element in range(1,len(row)-2):
            query1 = {
                "distance" : row[0],
                "base_price" : row[element],
                "wagon_type" : Wagon_types[element-1],
                "train_load_type" : "Wagon Load",
                "commodity_class_type" : "dangerous",
                "currency" : "EUR",
                "country_code" : "FR",
                "haulage_type": "merchant"
                }
            
            query2 = {
                "distance" : row[0],
                "base_price" : row[element+2],
                "wagon_type" : Wagon_types[element-1],
                "train_load_type" : "Wagon Load",
                "commodity_class_type" : "dangerous",
                "currency" : "EUR",
                "country_code" : "DE",
                "haulage_type": "merchant"
                }
            
            HaulageFreightRateRuleSet.create(**query1)
            HaulageFreightRateRuleSet.create(**query2)


    for row in data_general_carrier:
        for element in range(1,len(row)-2):
            query1 = {
                "distance" : row[0],
                "base_price" : row[element],
                "wagon_type" : Wagon_types[element-1],
                "train_load_type" : "Wagon Load",
                "commodity_class_type" : "standard",
                "currency" : "EUR",
                "country_code" : "FR",
                "haulage_type": "carrier"
                }
            
            query2 = {
                "distance" : row[0],
                "base_price" : row[element+2],
                "wagon_type" : Wagon_types[element-1],
                "train_load_type" : "Wagon Load",
                "commodity_class_type" : "standard",
                "currency" : "EUR",
                "country_code" : "DE",
                "haulage_type": "carrier"
                }
            
            HaulageFreightRateRuleSet.create(**query1)
            HaulageFreightRateRuleSet.create(**query2)

    
    for row in data_general_client:
        for element in range(1,len(row)-2):
            query1 = {
                "distance" : row[0],
                "base_price" : row[element],
                "wagon_type" : Wagon_types[element-1],
                "train_load_type" : "Wagon Load",
                "commodity_class_type" : "standard",
                "currency" : "EUR",
                "country_code" : "FR",
                "haulage_type": "merchant"
                }
            
            query2 = {
                "distance" : row[0],
                "base_price" : row[element+2],
                "wagon_type" : Wagon_types[element-1],
                "train_load_type" : "Wagon Load",
                "commodity_class_type" : "standard",
                "currency" : "EUR",
                "country_code" : "DE",
                "haulage_type": "merchant"
                }
            
            HaulageFreightRateRuleSet.create(**query1)
            HaulageFreightRateRuleSet.create(**query2)

    for row in data_empty_wagon_client:
        for element in range(1,len(row)-2):
            query1 = {
                "distance" : row[0],
                "base_price" : row[element],
                "wagon_type" : Wagon_types[element-1],
                "train_load_type" : "Wagon Load",
                "commodity_class_type" : "empty",
                "currency" : "EUR",
                "country_code" : "FR",
                "haulage_type": "merchant"
                }
            
            query2 = {
                "distance" : row[0],
                "base_price" : row[element+2],
                "wagon_type" : Wagon_types[element-1],
                "train_load_type" : "Wagon Load",
                "commodity_class_type" : "empty",
                "currency" : "EUR",
                "country_code" : "DE",
                "haulage_type": "merchant"
                }
            
            HaulageFreightRateRuleSet.create(**query1)
            HaulageFreightRateRuleSet.create(**query2)